{"id":"Spoofing the {source.Name} Process","inclusions":{"loadedInclusions":[{"source":"Process","target":"Process","requiresTrustBoundaryIntersection":true},{"source":"Process","target":"Data Store","requiresTrustBoundaryIntersection":true}]},"exclusions":{"loadedExclusions":[{"source":"","target":"","sourceExclusionAttributes":{"implements or uses Authentication Mechanism":"yes"},"flowExclusionAttributes":{"authenticates source":"yes"},"targetExclusionAttributes":{}}]},"descriptionTemplate":"{source.Name} may be spoofed by an attacker and this may lead to unauthorized access to {target.Name}. Consider using a standard authentication mechanism to identify the source process.","titleTemplate":"Spoofing the {source.Name} Process","strideCategory":"SPOOFING"}
{"id": "Spoofing the {target.Name} Process","inclusions":{"loadedInclusions": [{"source": "Process", "target":"Process", "requiresTrustBoundaryIntersection":true},{"source": "External Entity", "target":"Process", "requiresTrustBoundaryIntersection":true}, {"source": "Data Store", "target":"Process", "requiresTrustBoundaryIntersection":true}]}, "exclusions": {"loadedExclusions": [{"source": "", "target":  "", "sourceExclusionAttributes": {}, "flowExclusionAttributes": {"authenticates target":"yes"},"targetExclusionAttributes":{}}]}, "descriptionTemplate": "{target.Name} may be spoofed by an attacker and this may lead to information disclosure by {source.Name}. Consider using a standard authentication mechanism to identify the destination process.", "titleTemplate": "Spoofing the {target.Name} Process", "strideCategory": "SPOOFING"}
{"id":"Spoofing the {source.Name} External Entity","inclusions":{"loadedInclusions":[{"source":"External Entity","target":"Process","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[{"source":"","target":"","sourceExclusionAttributes":{"authenticates itself":"yes"},"flowExclusionAttributes":{"authenticates source":"yes"},"targetExclusionAttributes":{}}]},"descriptionTemplate":"{source.Name} may be spoofed by an attacker and this may lead to unauthorized access to {target.Name}. Consider using a standard authentication mechanism to identify the external entity.","titleTemplate":"Spoofing the {source.Name} External Entity","strideCategory":"SPOOFING"}
{"id":"Spoofing of Source Data Store {source.Name}","inclusions":{"loadedInclusions":[{"source":"Data Store","target":"","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[]},"descriptionTemplate":"{source.Name} may be spoofed by an attacker and this may lead to incorrect data delivered to {target.Name}. Consider using a standard authentication mechanism to identify the source data store.","titleTemplate":"Spoofing of Source Data Store {source.Name}","strideCategory":"SPOOFING"}
{"id":"Spoofing of Destination Data Store {target.Name}","inclusions":{"loadedInclusions":[{"source":"","target":"Data Store","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[]},"descriptionTemplate":"{target.Name} may be spoofed by an attacker and this may lead to data being written to the attacker's target instead of {target.Name}. Consider using a standard authentication mechanism to identify the destination data store.","titleTemplate":"Spoofing of Destination Data Store {target.Name}","strideCategory":"SPOOFING"}
{"id":"Spoofing of the {target.Name} External Destination Entity","inclusions":{"loadedInclusions":[{"source":"Process","target":"External Entity","requiresTrustBoundaryIntersection":true}]},"exclusions":{"loadedExclusions":[]},"descriptionTemplate":"{target.Name} may be spoofed by an attacker and this may lead to data being sent to the attacker's target instead of {target.Name}. Consider using a standard authentication mechanism to identify the external entity.","titleTemplate":"Spoofing of the {target.Name} External Destination Entity","strideCategory":"SPOOFING"}
{"id":"Potential Lack of Input Validation for {target.Name}","inclusions":{"loadedInclusions":[{"source":"Process","target":"Process","requiresTrustBoundaryIntersection":true},{"source":"External Entity","target":"Process","requiresTrustBoundaryIntersection":true}]},"exclusions":{"loadedExclusions":[{"source":"","target":"","sourceExclusionAttributes":{},"flowExclusionAttributes":{"provides confidentiality and integrity":"yes"},"targetExclusionAttributes":{}}]},"descriptionTemplate":"Data flowing across {flow.Name} may be tampered with by an attacker. This may lead to a denial of service attack against {target.Name} or an elevation of privilege attack against {target.Name} or an information disclosure by {target.Name}. Failure to verify that input is as expected is a root cause of a very large number of exploitable issues. Consider all paths and the way they handle data. Verify that all input is verified for correctness using an approved list input validation approach.","titleTemplate":"Potential Lack of Input Validation for {target.Name}","strideCategory":"TAMPERING"}
{"id":"{source.Name} Process Memory Tampered","inclusions":{"loadedInclusions":[{"source":"Process","target":"Process","requiresTrustBoundaryIntersection":true}]},"exclusions":{"loadedExclusions":[]},"descriptionTemplate":"If {target.Name} uses unmanaged code such as C and if {source.Name} is given access to memory, such as shared memory or pointers, or is given the ability to control what {target.Name} executes (for example, passing back a function pointer.), then {source.Name} can tamper with {target.Name}. Consider if the function could work with less access to memory, such as passing data rather than pointers. Copy in data provided, and then validate it.","titleTemplate":"{source.Name} Process Memory Tampered","strideCategory":"TAMPERING"}
{"id":"Replay Attacks","inclusions":{"loadedInclusions":[{"source":"Process","target":"Process","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[]},"descriptionTemplate":"If {target.Name} uses or implements a communication protocol then packets or messages without sequence numbers or timestamps can be captured and replayed in a wide variety of ways. Implement or utilize an existing communication protocol that supports anti-replay techniques (investigate sequence numbers before timers) and strong integrity.","titleTemplate":"Replay Attacks","strideCategory":"TAMPERING"}
{"id":"Collision Attacks","inclusions":{"loadedInclusions":[{"source":"Process","target":"Process","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[]},"descriptionTemplate":"If {target.Name} uses or implements a communication protocol then attackers who can send a series of packets or messages may be able to overlap data. For example, packet 1 may be 100 bytes starting at offset 0. Packet 2 may be 100 bytes starting at offset 25. Packet 2 will overwrite 75 bytes of packet 1. Ensure you reassemble data before filtering it, and ensure you explicitly handle these sorts of cases.","titleTemplate":"Collision Attacks","strideCategory":"TAMPERING"}
{"id":"Risks from Logging","inclusions":{"loadedInclusions":[{"source":"Process","target":"Data Store","requiresTrustBoundaryIntersection":false},{"source":"Data Store","target":"Process","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[]},"descriptionTemplate":"If the Data Store stores log data keep in mind that log readers can come under attack via log files. Consider ways to canonicalize data in all logs. Implement a single reader for the logs, if possible, in order to reduce attack surface area. Be sure to understand and document log file elements which come from untrusted sources.","titleTemplate":"Risks from Logging","strideCategory":"TAMPERING"}
{"id":"Authenticated Data Flow Compromised","inclusions":{"loadedInclusions":[{"source":"","target":"","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[{}]},"descriptionTemplate":"If {flow.Name} authenticates either {source.Name} or {target.Name} without providing confidentiality and integrity an attacker can read or modify data transmitted over this dataflow.","titleTemplate":"Authenticated Data Flow Compromised","strideCategory":"TAMPERING"}
{"id":"Possible SQL Injection Vulnerability for {target.Name}","inclusions":{"loadedInclusions":[{"source":"Extenal Entity","target":"Data Store","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[{}]},"descriptionTemplate":"SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. Any procedure that constructs SQL statements should be reviewed for injection vulnerabilities because SQL Server will execute all syntactically valid queries that it receives. Even parameterized data can be manipulated by a skilled and determined attacker.","titleTemplate":"Possible SQL Injection Vulnerability for {target.Name}","strideCategory":"TAMPERING"}
{"id":"XML DTD and XSLT Processing","inclusions":{"loadedInclusions":[{"source":"","target":"Process","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[{}]},"descriptionTemplate":"If a dataflow contains XML, XML processing threats (DTD and XSLT code execution) may be exploited.","titleTemplate":"XML DTD and XSLT Processing","strideCategory":"TAMPERING"}
{"id":"JavaScript Object Notation Processing","inclusions":{"loadedInclusions":[{"source":"","target":"Process","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[{}]},"descriptionTemplate":"If a dataflow contains JSON, JSON processing and hijacking threats may be exploited.","titleTemplate":"JavaScript Object Notation Processing","strideCategory":"TAMPERING"}
{"id":"Cross Site Scripting","inclusions":{"loadedInclusions":[{"source":"","target":"Process","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[{"source":"","target":"","sourceExclusionAttributes":{},"flowExclusionAttributes":{},"targetExclusionAttributes":{"sanitizes input and output":"yes"}}]},"descriptionTemplate":"If {target.Name} is a web server it could be a subject to a cross-site scripting attack because it might not sanitize untrusted input.","titleTemplate":"Cross Site Scripting","strideCategory":"TAMPERING"}
{"id":"Persistent Cross Site Scripting","inclusions":{"loadedInclusions":[{"source":"Data Store","target":"Process","requiresTrustBoundaryIntersection":false}]},"exclusions":{"loadedExclusions":[{"source":"","target":"","sourceExclusionAttributes":{},"flowExclusionAttributes":{},"targetExclusionAttributes":{"sanitizes input and output":"yes"}}]},"descriptionTemplate":"If {target.Name} is a web server it could be a subject to a persistent cross-site scripting attack because it does not sanitize data store '{source.Name}' inputs and output.","titleTemplate":"Persistent Cross Site Scripting","strideCategory":"TAMPERING"}
{"id":"The {target.Name} Data Store Could Be Corrupted","inclusions":{"loadedInclusions":[{"source":"Process","target":"Data Store","requiresTrustBoundaryIntersection":true},{"source":"External Entity","target":"Data Store","requiresTrustBoundaryIntersection":true}]},"exclusions":{"loadedExclusions":[]},"descriptionTemplate":"Data flowing across {flow.Name} may be tampered with by an attacker. This may lead to corruption of {target.Name}. Ensure the integrity of the data flow to the data store.","titleTemplate":"The {target.Name} Data Store Could Be Corrupted","strideCategory":"TAMPERING"}
{"id":"Lower Trusted Subject Updates Logs","inclusions":{"loadedInclusions":[{"source":"Process","target":"Data Store","requiresTrustBoundaryIntersection":true},{"source":"External Entity","target":"Data Store","requiresTrustBoundaryIntersection":true}]},"exclusions":{"loadedExclusions":[]},"descriptionTemplate":"If {target.Name} stores log data and you have trust levels, is anyone other outside of the highest trust level allowed to log? Letting everyone write to your logs can lead to repudiation problems. Only allow trusted code to log","titleTemplate":"Lower Trusted Subject Updates Logs","strideCategory":"REPUDIATION"}
{"id":"Data Logs from an Unknown Source","inclusions":{"loadedInclusions":[{"source":"Process","target":"Data Store","requiresTrustBoundaryIntersection":true},{"source":"External Entity","target":"Data Store","requiresTrustBoundaryIntersection":true}]},"exclusions":{"loadedExclusions":[]},"descriptionTemplate":"If {target.Name} stores logs and accepts them from unknown or weakly authenticated users or systems identify and authenticate the source of the logs before accepting them.","titleTemplate":"Data Logs from an Unknown Source","strideCategory":"REPUDIATION"}
